/** *  This file is part of LastMF AS3 OOP API. *   *  http://code.google.com/p/lastfm-as3-oop-api/ * *  LastMF AS3 OOP API is free software: you can redistribute it and/or modify *  it under the terms of the GNU General Public License as published by *  the Free Software Foundation, either version 3 of the License, or *  (at your option) any later version. * *  LastMF AS3 OOP API is distributed in the hope that it will be useful, *  but WITHOUT ANY WARRANTY; without even the implied warranty of *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the *  GNU General Public License for more details. * *  You should have received a copy of the GNU General Public License *  along with LastMF AS3 OOP API.  If not, see <http://www.gnu.org/licenses/>. *   *  @author Christian Giordano for Tonic.co.uk * */package fm.last.model{	import flash.events.Event;	import fm.last.enum.FMImageSizeType;	/**	 * Incapsulates all the methods of the Last.fm playlist web service     */	public class FMPlayList extends FMModelBase	{		public static const FETCH:String = "playlist.fetch";				public var id : Number;		public var title : String;		public var description : String;		public var size : Number;		public var duration : Number;		public var annotation : String;		public var creator : String;		public var dateRaw : String;		public var trackList : Array;		public var url : String;		public var streamable : Boolean;				private var xmlns:Namespace = new Namespace("http://xspf.org/ns/0/");				public static function createFromXML ( xml : XML ) : FMPlayList		{			var o : FMPlayList = new FMPlayList();			if(xml.id[0] != null)				o.id = parseInt(xml.id.text());			o.title = xml.title.text();			if(xml.description[0] != null)				o.description = xml.description.text();			if(xml.date[0] != null)				o.dateRaw = xml.date.text();			if(xml.size[0] != null)				o.size = parseInt(xml.size.text());			if(xml.duration[0] != null)				o.duration = parseInt(xml.duration.text());			o.url = xml.url.text();			o.creator = xml.creator.text();			o.streamable = xml.streamable.text() == "1";			if(xml.image[0] != null)				o.addImages(xml.image);			return o; 		}		public function FMPlayList( url : String = null) {			this.url = url;		}				private function populateTrackListFromXSPF(children : XMLList) : void		{			trackList = [];			for each(var child : XML in children){				trackList.push(createTrackFromXSPF(child));			}		}				// I created a custom function because the xml is very different to the generic one // Christian Giordano		private function createTrackFromXSPF ( xml : XML) : FMTrack		{			var t : FMTrack = new FMTrack();			t.name = xml.xmlns::title.text();			t.url = xml.xmlns::identifier.text();			t.artist = new FMArtist(xml.xmlns::creator.text());			t.album = new FMAlbum(xml.xmlns::album.text());			t.duration = parseInt(xml.xmlns::duration.text());			t.addImage(FMImageSizeType.LARGE, xml.xmlns::image.text());						return t;		}		/**		 * fetch the playlist content.		 * 		 * Ref: http://www.last.fm/api/show?service=271		 */		public function fetch():void		{			assert(url != null, "To fetch a playlist you need to define its url");						requestURL(FETCH, {playlistURL: url}, onFetched);		}				private function onFetched ( response : XML ) : void		{			title = response.xmlns::playlist.xmlns::title[0].text();			annotation = response.xmlns::playlist.xmlns::annotation[0].text();			creator = response.xmlns::playlist.xmlns::creator[0].text();			dateRaw = response.xmlns::playlist.xmlns::date[0].text();			if(response.xmlns::playlist.xmlns::trackList[0] != null)				populateTrackListFromXSPF(response.xmlns::playlist.xmlns::trackList.xmlns::track);			dispatchEvent(new Event(FETCH));		}	}}