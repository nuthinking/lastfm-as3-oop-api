/** *  This file is part of LastMF AS3 OOP API. *   *  http://code.google.com/p/lastfm-as3-oop-api/ * *  LastMF AS3 OOP API is free software: you can redistribute it and/or modify *  it under the terms of the GNU General Public License as published by *  the Free Software Foundation, either version 3 of the License, or *  (at your option) any later version. * *  LastMF AS3 OOP API is distributed in the hope that it will be useful, *  but WITHOUT ANY WARRANTY; without even the implied warranty of *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the *  GNU General Public License for more details. * *  You should have received a copy of the GNU General Public License *  along with LastMF AS3 OOP API.  If not, see <http://www.gnu.org/licenses/>. *   *  @author Christian Giordano for Tonic.co.uk * */package fm.last.model.vo{	import fm.last.model.FMGeo;	import fm.last.model.LastFMPreferences;	import fm.last.utils.TraceUtils;	/**	 * ValueObject used in FMVenue	 * 	 * @see FMVenue	 * 	 * @author christian	 */	public class FMLocation 	{		/**		 * The city of the location		 */		public var city : String;				/**		 * The country of the location		 */		public var country : String;				/**		 * The street of the location		 */		public var street : String;				/**		 * The post code of the location		 */		public var postalCode : String;				/**		 * The geo coordinates of the location		 */		public var geo : FMGeo;				/**		 * The time zone of the location (ie. "CET")		 */		public var timezone : String;				/**		 * Constructor		 */		public function FMLocation()		{		}				/**		 * Populate the model from the different XML formats returned by the web service		 * 		 * @param the XML node representing the model		 */		protected function populateFromXML ( xml : XML ) : void		{			var geoNamespace : Namespace = xml.namespace('geo');			city = xml.city.text();			country = xml.country.text();			street = xml.street.text();			postalCode = xml.postalcode.text();			geo = LastFMPreferences.modelFactory.createGeo(xml.geoNamespace::point[0]);			timezone = xml.timezone.text();		}				public function toString () : String		{			return TraceUtils.generateObjectDescription(this, ["city","country","geo"]);		}				/**		 * Creates an instance of the model starting from the XML node returned by the web service		 * 		 * @param the xml node representing the model		 * @return the new populated instance		 */		public static function createFromXML(xml : XML) : FMLocation		{			var l : FMLocation = new FMLocation();			l.populateFromXML(xml);			return l;		}	}}