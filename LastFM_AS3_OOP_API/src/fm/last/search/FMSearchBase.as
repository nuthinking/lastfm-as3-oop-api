/** *  This file is part of LastMF AS3 OOP API. *   *  http://code.google.com/p/lastfm-as3-oop-api/ * *  LastMF AS3 OOP API is free software: you can redistribute it and/or modify *  it under the terms of the GNU General Public License as published by *  the Free Software Foundation, either version 3 of the License, or *  (at your option) any later version. * *  LastMF AS3 OOP API is distributed in the hope that it will be useful, *  but WITHOUT ANY WARRANTY; without even the implied warranty of *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the *  GNU General Public License for more details. * *  You should have received a copy of the GNU General Public License *  along with LastMF AS3 OOP API.  If not, see <http://www.gnu.org/licenses/>. *   *  @author Christian Giordano for Tonic.co.uk * */package fm.last.search {	import fm.last.model.LastFMPreferences;	import fm.last.utils.IFMModelFactory;	import fm.last.events.FMLoadEvent;	import fm.last.utils.FMLoader;	import fm.last.utils.IFMLoader;	import fm.last.utils.PageResults;	import flash.events.Event;	import flash.events.EventDispatcher;	/**	 * Abstract class for the search classes	 * 	 * @author christian	 */	public class FMSearchBase extends EventDispatcher 	{		/**		 * The main term to search		 */		public var term : String;				/**		 * The class to be used for web service calls loading		 */		public static var LOADER_CLASS : Class = FMLoader;				/**		 * The name of the item the search is for (ie.: "artist", "user", etc...)		 * This should be overridden by the subclass		 */		protected var itemName : String;				/**		 * The API method name to use		 * This should be overridden by the subclass		 */		protected var methodName : String;				/**		 * The multipage result		 */		protected var searchResults : PageResults;				/**		 * Constructor		 * 		 * @param the main term to search		 */		public function FMSearchBase(term : String = null)		{			super(null);						this.term = term;		}				/**		 * Shortcut to the model factory		 */		protected function get mf () : IFMModelFactory		{			return LastFMPreferences.modelFactory;		}				/**		 * Load the search results.		 * 		 * On succesfully complete, it will dispatch the event type Event.COMPLETE		 * 		 * @param the max amount of results to load		 */		public function execute(maxAmount : int = 20) : void		{			if(term == null)				throw new Error("A search can be executed only if term is defined");			if(itemName == null)				throw new Error("A search can be executed only if the itemName is defined");			if(methodName == null)				throw new Error("A search can be executed only if the methodName is defined");			if(maxAmount<=0)				throw new Error("the amount of results for search should be higher than 0");							searchResults = new PageResults(maxAmount);			executeNext();		}				/**		 * Load the next page of results		 */		protected function executeNext() : void		{			var variables : Object = createVariables();			variables.page = searchResults.currentPage + 1;			variables.limit = Math.min(searchResults.remainingToLoad, 20);			variables[itemName] = term;						var loader : IFMLoader = new LOADER_CLASS();			loader.addEventListener(FMLoadEvent.LOAD_COMPLETE, onResult);			loader.requestUrl(methodName, variables);		}				/**		 * creates the url variables object, should be overridden to add extra fields after the term		 */		protected function createVariables () : Object		{			return {};		}				/**		 * creates models from the XML returned by the web service call		 * 		 * @param the xml loaded by the web service call		 * @return the item generated after the parsing		 */		protected function generateItems ( responseXML : XML) : Array		{			throw new Error("this method should be overriden by the subclass");			return null;		}				/**		 * called when a result page is loaded, it check if other pages need to be loaded and in case dispatch the Event.COMPLETE		 * 		 * @param the load event		 */		protected function onResult ( e : FMLoadEvent ) : void		{			var xml : XML = e.response;			var items : Array = generateItems(xml);			searchResults.addPage(items);			var resultsXML : XML = xml.results[0];			var opensearch : Namespace = resultsXML.namespace('opensearch');			var totalResults : int = parseInt(resultsXML.opensearch::totalResults.text());			if(!searchResults.isFilled && totalResults > searchResults.items.length){				executeNext();			}else{				dispatchEvent(new Event(Event.COMPLETE));			}		}	}}