/** *  This file is part of LastMF AS3 OOP API. *   *  http://code.google.com/p/lastfm-as3-oop-api/ * *  LastMF AS3 OOP API is free software: you can redistribute it and/or modify *  it under the terms of the GNU General Public License as published by *  the Free Software Foundation, either version 3 of the License, or *  (at your option) any later version. * *  LastMF AS3 OOP API is distributed in the hope that it will be useful, *  but WITHOUT ANY WARRANTY; without even the implied warranty of *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the *  GNU General Public License for more details. * *  You should have received a copy of the GNU General Public License *  along with LastMF AS3 OOP API.  If not, see <http://www.gnu.org/licenses/>. *   *  @author Christian Giordano for Tonic.co.uk * */package fm.last.enum {	import flash.utils.Dictionary;	/**	 * Enumerator which defines the different sizes available for an image	 * 	 * @author christian	 */	public class FMImageSizeType 	{		/**		 * Enumerator for "small"		 */		public static const SMALL : FMImageSizeType = new FMImageSizeType("small");				/**		 * Enumerator for "medium"		 */		public static const MEDIUM : FMImageSizeType = new FMImageSizeType("medium");				/**		 * Enumerator for "large"		 */		public static const LARGE : FMImageSizeType = new FMImageSizeType("large");				/**		 * Enumerator for "largesquare"		 */		public static const LARGE_SQUARE : FMImageSizeType = new FMImageSizeType("largesquare");				/**		 * Enumerator for "extralarge"		 */		public static const EXTRA_LARGE : FMImageSizeType = new FMImageSizeType("extralarge");				/**		 * Enumerator for "original"		 */		public static const ORIGINAL : FMImageSizeType = new FMImageSizeType("original");				private var value : String;				/**		 * The dictionary which contains all the enumerators. Use getEnumByValue to retrieve one from a string		 */		protected static var map : Dictionary;				/**		 * Constructor		 * 		 * @param the string representation of the enumerator		 */		public function FMImageSizeType(value : String)		{			this.value = value.toLowerCase();			register();		}				private function register() : void		{			if(map == null)				map = new Dictionary();			map[value] = this;		}				public function toString () : String		{			return "FMImageSizeType{value:" + value + "}";		}				/**		 * Allows to retrieve an enumerator from its string representation		 * 		 * @param the string representation of the enumerator		 * @return the enumerator registered with the passed string		 */		public static function getEnumByValue (value : String) : FMImageSizeType		{			var enum : FMImageSizeType = map[value.toLowerCase()];			if(enum == null)				trace("Error: ImageSizeType couldn't find enumerator with value \"" + value + "\"");			return enum;		}	}}