/** *  This file is part of LastMF AS3 OOP API. *   *  http://code.google.com/p/lastfm-as3-oop-api/ * *  LastMF AS3 OOP API is free software: you can redistribute it and/or modify *  it under the terms of the GNU General Public License as published by *  the Free Software Foundation, either version 3 of the License, or *  (at your option) any later version. * *  LastMF AS3 OOP API is distributed in the hope that it will be useful, *  but WITHOUT ANY WARRANTY; without even the implied warranty of *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the *  GNU General Public License for more details. * *  You should have received a copy of the GNU General Public License *  along with LastMF AS3 OOP API.  If not, see <http://www.gnu.org/licenses/>. *   *  @author Christian Giordano for Tonic.co.uk * */package test.last.model {	import fm.last.model.FMEvent;	import fm.last.model.FMTrack;	import fm.last.model.FMArtist;	import fm.last.model.FMGeo;	import flash.events.Event;	/**	 * @author christian	 */	public class FMGeoTest extends FMModelTest 	{		[Embed("../../../data/constructors/geo.xml", mimeType="application/octet-stream")]      	private static const CONSTRUCTOR_XML_CLASS:Class;      			public function FMGeoTest(methodName : String = null)		{			super(methodName);		}				public function testCreationFromXML () : void		{			var g : FMGeo = FMGeo.createFromXML(getEmbeddedXML(CONSTRUCTOR_XML_CLASS));			assertEquals("creationFromXML should be set the correct latitude", 45.443797, g.latitude);			assertEquals("creationFromXML should be set the correct longitude", 9.196507, g.longitude);		}				public function testLoadingEventsFailure () : void		{			var geo : FMGeo = new FMGeo();			try{				geo.getEvents();				fail("FMGeo.getEvents should fire error if doesn't contain any location");			}catch(e : Error){			}			geo.latitude = 1;			try{				geo.getEvents();				fail("FMGeo.getEvents should fire error if only latitude is defined");			}catch(e : Error){			}			geo = new FMGeo();			geo.longitude = 1;			try{				geo.getEvents();				fail("FMGeo.getEvents should fire error if only longitude is defined");			}catch(e : Error){			}		}				public function testLoadingTopArtists () : void		{			var geo : FMGeo = new FMGeo();			try{				geo.getTopArtists();				fail("FMGeo.getTopArtists should fire an error if country is not defined");			}catch(e : Error){							}			geo.country = "Spain";			geo.addEventListener(FMGeo.GET_TOP_ARTISTS, onGeoArtistsLoaded);			geo.getTopArtists();		}				private function onGeoArtistsLoaded(e : Event) : void		{			var geo : FMGeo = FMGeo(e.currentTarget);			assertEquals("geo should load the correct amount of artists", 50, geo.topArtists.length);			var firstArtist : FMArtist = geo.topArtists[0];			assertEquals("top artist in geo should be", "Coldplay", firstArtist.name);			assertEquals("top artist in geo should have the correct rank", 1, firstArtist.rank);			var lastArtist : FMArtist = geo.topArtists.pop();			assertEquals("the last top artist in geo should be", "Editors", lastArtist.name);			assertEquals("the last top artist in geo should have the correct rank", 50, lastArtist.rank);		}				public function testLoadingTopTracks () : void		{			var geo : FMGeo = new FMGeo();			try{				geo.getTopTracks();				fail("FMGeo.getTopTracks should fire an error if nor country nor locaton are defined");			}catch(e:Error){							}			geo.country = "Italy";			geo.addEventListener(FMGeo.GET_TOP_TRACKS, onGeoTracksLoaded);			geo.getTopTracks();		}				private function onGeoTracksLoaded(e : Event) : void		{			var geo : FMGeo = FMGeo(e.currentTarget);			assertEquals("geo should load the correct amount of tracks", 50, geo.topTracks.length);			var firstTrack : FMTrack = geo.topTracks[0];			assertEquals("top track in geo should be", "Viva la Vida", firstTrack.name);			assertEquals("top track in geo should have the correct rank", 1, firstTrack.rank);			var lastTrack : FMTrack = geo.topTracks.pop();			assertEquals("the last top track in geo should be", "No You Girls", lastTrack.name);			assertEquals("the last top track in geo should have the correct rank", 50, lastTrack.rank);		}		public function testLoadingEvents () : void		{			var geo : FMGeo = new FMGeo();			geo.location = "foo";			geo.addEventListener(FMGeo.GET_EVENTS, onEventsLoaded);			geo.getEvents(15);		}				private function onEventsLoaded(e : Event) : void		{			var geo : FMGeo = FMGeo(e.currentTarget);			var events : Array = geo.events;			assertEquals("get events should return 15 events", 15, events.length);			var firstEvent : FMEvent = events[0];			assertEquals("the first event shold have the right id", 963563, firstEvent.id);			assertEquals("the first event shold have the right venue", "Pen√©lope", firstEvent.venue.name);			var lastEvent : FMEvent = events.pop();			assertEquals("the last event shold have the right id", 907473, lastEvent.id);			assertEquals("the last event shold have the right venue", "Joy Eslava", lastEvent.venue.name);		}	}}